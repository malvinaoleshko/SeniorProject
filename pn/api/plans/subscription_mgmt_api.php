<?php
require("../auth/login_check.php"); //Make sure the users is logged in
require_once('../../variables.php');
require_once('pp_token_generator.php');

/**
 * Common API Components
 * API calls to PayPal (PP) require $pp_token, any call can fail and needs to be retried after gen_new_token() is called
 */

/**
 * Returns boolean whether subscription_id belongs to session user, or true if admin
 * @param $sub_id
 * @return bool true, if belongs to session user/ or if admin; false, if wrong user or not admin
 */
function verify_permission($sub_id){
    $verified = false;
    if($_SESSION['is_admin'] == "1") {
        $verified = true; //is admin
    } else {
        global $db_host, $db_name, $db_user, $db_pass;
        $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
        $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
        $stmt = $con->prepare("SELECT s.user_id FROM subscriptions AS s WHERE s.subscription_id = ?");
        $stmt->execute([$sub_id]);
        $result = $stmt->fetchAll();
        $user_id = $result[0]['user_id'];

        if($user_id == $_SESSION['user_id']) {
            $verified = true; //is verified user
        }
    }
    return $verified;
}


function get_complete_subscription_details($sub_id){
    global $pp_token;
    $sub_details_pp = get_sub_details_pp($sub_id,$pp_token);
    if(!$sub_details_pp){
        gen_new_token();
        $sub_details_pp = get_sub_details_pp($sub_id,$pp_token);
    }
    if(isset($sub_details_pp['plan_id'])) {
        global $db_host, $db_name, $db_user, $db_pass;
        $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
        $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
        $stmt = $con->prepare("SELECT plan_name FROM plans WHERE plan_id = ?");
        $plan_id = $sub_details_pp['plan_id'];
        $stmt->execute([$plan_id]);
        $result = $stmt->fetchAll();
        $plan_name = $result[0]['plan_name'];
        $sub_details_pp['plan_name'] = $plan_name;
        return $sub_details_pp;
    } else return false;
}

/**
 * Sends subscription to the database
 * @param $user_id
 * @param $created_subscription_id
 * @return array
 */
function send_subscription_to_db($user_id, $created_subscription_id){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    $stmt = $con->prepare("
        INSERT INTO subscriptions (subscription_id, user_id) values (?, ?)
    ");
    $stmt->execute([$created_subscription_id, $user_id]);
    $result = $stmt->fetchAll();
    return $result;
}

/**
 * Executes complete cancellation process, handles pp_token checking
 * @param $sub_id
 * @param $reason
 * @return string 'Success'/'Error: [...]'
 */
function cancel_subscription($sub_id, $reason){
    $result_return = "";

    $sizeof = strlen($reason);
    if($sizeof > 255){
        $result_return = "Error: Reason needs to be less than 255 characters";
    }
    if(verify_permission($sub_id)){
        $http_code = cancel_subscription_pp($sub_id, $reason);
        //HTTP Code 401 - Unauthorized Error : Token probably expired, retry w/ new token
        if($http_code == 401){
            gen_new_token();
            $http_code = cancel_subscription_pp($sub_id, $reason);
        }
        //Accepted HTTP Codes
        //204 - No Content : Has been cancelled
        //422 - Unprocessable Entity: Is not processable because subscription no longer exists
        if(($http_code == 204) || ($http_code == 422)){
            cancel_subscription_db($sub_id, $reason);
            $result_return ='Success';
        } else {
            $result_return = 'Error: Cancellation Request Failed';
        }
    }
    return $result_return;
}

/**
 * Sends a cancellation request to PayPal
 * @param $sub_id
 * @param $reason
 * @param $pp_token
 * @return mixed returns HTTP Status Code
 *  - 204 - No Content : Has been cancelled
 *  - 422 - Unprocessable Entity: Is not processable because subscription no longer exists
 *  - 401 - Unauthorized Error : Token probably expired
 */
function cancel_subscription_pp($sub_id, $reason){
    global $pp_token;
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api.sandbox.paypal.com/v1/billing/subscriptions/'.$sub_id.'/cancel');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, '{"reason": "'.$reason.'"}');

    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$pp_token;
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    $info = curl_getinfo($ch);
    curl_close($ch);
    //Checking for desired status code - No Content
    //True/false
    return ($info['http_code']);
}

/**
 * Sets the subscription entry to is_cancelled w/ reason in db
 * @param $sub_id
 * @param $reason
 */
function cancel_subscription_db($sub_id, $reason){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    $stmt = $con->prepare("UPDATE subscriptions AS s SET s.is_cancelled = TRUE, s.reason = ?, s.cancelled_on = NOW() WHERE (s.subscription_id = ? AND s.is_cancelled = FALSE)");
    $stmt->execute([$reason, $sub_id]);
    $result = $stmt->fetchAll();
}



/**
 * Updates the given subscriptions of the database,
 * use functions get_all_active_subscriptions_db() or get_active_subscriptions_of_user_db to retrieve input for this method
 * NOTE: This does not update users premium status, call reevaluate_premium_states() after all changes have been mad
 * @param $subscriptions_from_db
 */
function update_subscription_info_db($subscriptions_from_db){
    if(is_array($subscriptions_from_db)) {
        global $pp_token;
        foreach ($subscriptions_from_db as $subscription) {
            if(isset($subscription['subscription_id'])) {
                $sub_id = $subscription['subscription_id'];
                $cur_plan = $subscription['plan_id'];
                //Get subscription details from PP
                $sub_details_pp = get_sub_details_pp($sub_id, $pp_token);
                if (!$sub_details_pp) { //gen new token if failed
                    gen_new_token();
                    $sub_details_pp = get_sub_details_pp($sub_id, $pp_token);
                }
                if ($sub_details_pp) {
                    if (isset($sub_details_pp['status']) && isset($sub_details_pp['plan_id'])) {
                        $sub_status = $sub_details_pp['status'];
                        $new_plan = $sub_details_pp['plan_id'];
                        match_subscription_details_db($sub_id, $cur_plan, $new_plan, $sub_status);
                    } else {
                        echo "Error: 'status' and 'plan_id' not set";
                    }
                } else { //We failed again
                    echo "Error: Was unable to get a reply from PayPal";
                }
            } else echo "Error: The subscription did not provide 'subscription_id' or current 'plan_id'";
        }
    } else echo "Error: subscription info needs to be passed in as an array OF subscription info from database";
}

/**
 * Gets subscription details using sub_id and a PayPal access_token
 * status:
 * APPROVAL_PENDING. The subscription is created but not yet approved by the buyer.
 * APPROVED. The buyer has approved the subscription.
 * ACTIVE. The subscription is active.
 * SUSPENDED. The subscription is suspended.
 * CANCELLED. The subscription is cancelled.
 * EXPIRED. The subscription is expired.
 *
 * @param $sub_id
 * @param $access_token
 * @return bool|mixed false, if failed; returns array with details otherwise
 */
function get_sub_details_pp($sub_id, $access_token){
    //REFERENCE: https://stackoverflow.com/a/60872876
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    if(!isset($sub_id) || !isset($access_token)){
        die('Error: Sub_id and/or access_token are not set');
    }

    curl_setopt($ch, CURLOPT_URL, 'https://api.sandbox.paypal.com/v1/billing/subscriptions/' . $sub_id);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$access_token;
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    //Checking for desired status code - OK
    $info = curl_getinfo($ch);
    curl_close($ch);
    if(!($info['http_code'] == 200)){
        return false;
    }
    return json_decode($result,true);
}

/**
 * Get all active subscriptions of all users
 * @return array
 */
function get_all_active_subscriptions_db(){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    $stmt = $con->prepare("SELECT s.subscription_id, s.user_id, s.plan_id FROM subscriptions AS s WHERE s.is_cancelled = FALSE");
    $stmt->execute();
    $result = $stmt->fetchAll();
    return $result;
}

/**
 * Gets all active subscriptions from given user
 * @param $user_id
 * @return array
 */
function get_active_subscriptions_of_user_db($user_id){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    $stmt = $con->prepare("SELECT s.subscription_id, s.user_id, plan_id FROM subscriptions AS s WHERE s.is_cancelled = FALSE AND s.user_id = ?");
    $stmt->execute([$user_id]);
    $result = $stmt->fetchAll();
    return $result;
}

/**
 * Sets the given plan for the given subscription
 * NOTE: This does not update users premium status, call reevaluate_premium_states() after all changes have been made
 * @param $sub_id
 * @param $new_plan_id
 */
function update_subscription_plan_db($sub_id, $new_plan_id){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    $stmt = $con->prepare("UPDATE subscriptions AS s SET s.plan_id = ? WHERE (s.subscription_id = ?)");
    $stmt->execute([$new_plan_id, $sub_id]);
    $result = $stmt->fetchAll();
}

/**
 * Matches given PayPal details with those of the database; if they are different, values are updated
 * Edge-case 1. PayPal doesn't allow CANCELLED subscriptions to be activated again, therefor if the subscription is_cancelled in the database but
 *  the $sub_status_pp from PayPal miraculously shows ACTIVE then db won't be changed to active with this function, has to be done manually
 * Edge-case 2. If somehow a subscription is SUSPENDED it will be CANCELLED, SUSPENDED subscriptions should only be available to PP business
 *  accounts with "Enhanced Recurring Payments" enabled, it is not enabled so if edge case we do get a suspended subscription we will cancel it.
 * NOTE: This does not update users premium status, call reevaluate_premium_states() after all changes have been made
 * @param $sub_id
 * @param $cur_plan_id
 * @param $new_plan_id
 * @param $sub_status_pp
 */
function match_subscription_details_db($sub_id, $cur_plan_id, $new_plan_id, $sub_status_pp){
    $result['Status'] = 'UNCHANGED';
    $result['Plan'] = 'UNCHANGED';
    if($cur_plan_id != $new_plan_id){
        $result['Plan'] = 'CHANGED';
        update_subscription_plan_db($sub_id, $new_plan_id);
    }
    if ($sub_status_pp == 'CANCELLED' || $sub_status_pp == 'SUSPENDED'){
        $result['Status'] = 'CHANGED';
        //Cancel subscription
        cancel_subscription_db($sub_id,'SYSTEM: Subscription was found to be CANCELLED OR SUSPENDED');
    }
}

function reevaluate_all_premium_states_db(){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    //SET SQL_SAFE_UPDATES=0; <QUERY>; SET SQL_SAFE_UPDATES=1; may be required in some other versions of mySQL
    $stmt = $con->prepare("
            UPDATE users AS u LEFT JOIN 
            (SELECT s.user_id, MAX(p.premium_state_id) AS prem_state_id FROM subscriptions AS s LEFT JOIN plans AS p ON (s.plan_id = p.plan_id) WHERE s.is_cancelled = FALSE GROUP BY s.user_id) AS premium_merge
            ON (u.user_id = premium_merge.user_id)
            SET u.premium_state = CASE WHEN premium_merge.prem_state_id IS NULL THEN 0 ELSE premium_merge.prem_state_id END;
        ");
    $stmt->execute();
    $result = $stmt->fetchAll();
}

function reevaluate_user_premium_state_db($user_id){
    global $db_host, $db_name, $db_user, $db_pass;
    $con = new PDO("mysql:host=$db_host;dbname=$db_name", $db_user, $db_pass);
    $con->setAttribute(PDO::ATTR_EMULATE_PREPARES, FALSE);
    //SET SQL_SAFE_UPDATES=0; <QUERY>; SET SQL_SAFE_UPDATES=1; may be required in some other versions of mySQL
    $stmt = $con->prepare("
            UPDATE users AS u LEFT JOIN 
            (SELECT s.user_id, MAX(p.premium_state_id) AS prem_state_id FROM subscriptions AS s LEFT JOIN plans AS p ON (s.plan_id = p.plan_id) WHERE s.user_id = ? AND s.is_cancelled = FALSE GROUP BY s.user_id) AS premium_merge
            ON (u.user_id = premium_merge.user_id)
            SET u.premium_state = CASE WHEN premium_merge.prem_state_id IS NULL THEN 0 ELSE premium_merge.prem_state_id END
            WHERE u.user_id = ?;
        ");
    $stmt->execute([$user_id,$user_id]);
    $result = $stmt->fetchAll();
}